# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import proto.messages_pb2 as messages__pb2


class ReportsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDashboardReport = channel.unary_unary(
                '/AvaProtos.Reports/GetDashboardReport',
                request_serializer=messages__pb2.ReportQuery.SerializeToString,
                response_deserializer=messages__pb2.DashboardReport.FromString,
                )
        self.GetNoSaleRecords = channel.unary_stream(
                '/AvaProtos.Reports/GetNoSaleRecords',
                request_serializer=messages__pb2.NoSaleQuery.SerializeToString,
                response_deserializer=messages__pb2.ShoeTrialResult.FromString,
                )
        self.GetTechSaleRecords = channel.unary_stream(
                '/AvaProtos.Reports/GetTechSaleRecords',
                request_serializer=messages__pb2.ReportQuery.SerializeToString,
                response_deserializer=messages__pb2.ShoeTrialResult.FromString,
                )
        self.GetBrandSaleRecords = channel.unary_stream(
                '/AvaProtos.Reports/GetBrandSaleRecords',
                request_serializer=messages__pb2.BrandSaleRecordsQuery.SerializeToString,
                response_deserializer=messages__pb2.ShoeTrialResult.FromString,
                )
        self.GetBrandModelSaleCounts = channel.unary_unary(
                '/AvaProtos.Reports/GetBrandModelSaleCounts',
                request_serializer=messages__pb2.BrandSaleRecordsQuery.SerializeToString,
                response_deserializer=messages__pb2.BrandModelSaleCounts.FromString,
                )
        self.GetDailySaleScanRecords = channel.unary_stream(
                '/AvaProtos.Reports/GetDailySaleScanRecords',
                request_serializer=messages__pb2.SaleScanRecordsQuery.SerializeToString,
                response_deserializer=messages__pb2.ShoeTrialResult.FromString,
                )
        self.GetSeasons = channel.unary_stream(
                '/AvaProtos.Reports/GetSeasons',
                request_serializer=messages__pb2.ReportQuery.SerializeToString,
                response_deserializer=messages__pb2.SeasonSelector.FromString,
                )
        self.GetBrandsSelector = channel.unary_stream(
                '/AvaProtos.Reports/GetBrandsSelector',
                request_serializer=messages__pb2.ReportQuery.SerializeToString,
                response_deserializer=messages__pb2.ShoeTrialResult.FromString,
                )
        self.GenerateHtml = channel.unary_unary(
                '/AvaProtos.Reports/GenerateHtml',
                request_serializer=messages__pb2.ReportQuery.SerializeToString,
                response_deserializer=messages__pb2.DashboardReport.FromString,
                )
        self.GetData = channel.unary_unary(
                '/AvaProtos.Reports/GetData',
                request_serializer=messages__pb2.DataRequest.SerializeToString,
                response_deserializer=messages__pb2.DataResponse.FromString,
                )


class ReportsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDashboardReport(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNoSaleRecords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTechSaleRecords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBrandSaleRecords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBrandModelSaleCounts(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDailySaleScanRecords(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSeasons(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBrandsSelector(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GenerateHtml(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReportsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDashboardReport': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDashboardReport,
                    request_deserializer=messages__pb2.ReportQuery.FromString,
                    response_serializer=messages__pb2.DashboardReport.SerializeToString,
            ),
            'GetNoSaleRecords': grpc.unary_stream_rpc_method_handler(
                    servicer.GetNoSaleRecords,
                    request_deserializer=messages__pb2.NoSaleQuery.FromString,
                    response_serializer=messages__pb2.ShoeTrialResult.SerializeToString,
            ),
            'GetTechSaleRecords': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTechSaleRecords,
                    request_deserializer=messages__pb2.ReportQuery.FromString,
                    response_serializer=messages__pb2.ShoeTrialResult.SerializeToString,
            ),
            'GetBrandSaleRecords': grpc.unary_stream_rpc_method_handler(
                    servicer.GetBrandSaleRecords,
                    request_deserializer=messages__pb2.BrandSaleRecordsQuery.FromString,
                    response_serializer=messages__pb2.ShoeTrialResult.SerializeToString,
            ),
            'GetBrandModelSaleCounts': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBrandModelSaleCounts,
                    request_deserializer=messages__pb2.BrandSaleRecordsQuery.FromString,
                    response_serializer=messages__pb2.BrandModelSaleCounts.SerializeToString,
            ),
            'GetDailySaleScanRecords': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDailySaleScanRecords,
                    request_deserializer=messages__pb2.SaleScanRecordsQuery.FromString,
                    response_serializer=messages__pb2.ShoeTrialResult.SerializeToString,
            ),
            'GetSeasons': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSeasons,
                    request_deserializer=messages__pb2.ReportQuery.FromString,
                    response_serializer=messages__pb2.SeasonSelector.SerializeToString,
            ),
            'GetBrandsSelector': grpc.unary_stream_rpc_method_handler(
                    servicer.GetBrandsSelector,
                    request_deserializer=messages__pb2.ReportQuery.FromString,
                    response_serializer=messages__pb2.ShoeTrialResult.SerializeToString,
            ),
            'GenerateHtml': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateHtml,
                    request_deserializer=messages__pb2.ReportQuery.FromString,
                    response_serializer=messages__pb2.DashboardReport.SerializeToString,
            ),
            'GetData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetData,
                    request_deserializer=messages__pb2.DataRequest.FromString,
                    response_serializer=messages__pb2.DataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AvaProtos.Reports', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Reports(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDashboardReport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Reports/GetDashboardReport',
            messages__pb2.ReportQuery.SerializeToString,
            messages__pb2.DashboardReport.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNoSaleRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Reports/GetNoSaleRecords',
            messages__pb2.NoSaleQuery.SerializeToString,
            messages__pb2.ShoeTrialResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTechSaleRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Reports/GetTechSaleRecords',
            messages__pb2.ReportQuery.SerializeToString,
            messages__pb2.ShoeTrialResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBrandSaleRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Reports/GetBrandSaleRecords',
            messages__pb2.BrandSaleRecordsQuery.SerializeToString,
            messages__pb2.ShoeTrialResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBrandModelSaleCounts(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Reports/GetBrandModelSaleCounts',
            messages__pb2.BrandSaleRecordsQuery.SerializeToString,
            messages__pb2.BrandModelSaleCounts.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDailySaleScanRecords(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Reports/GetDailySaleScanRecords',
            messages__pb2.SaleScanRecordsQuery.SerializeToString,
            messages__pb2.ShoeTrialResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSeasons(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Reports/GetSeasons',
            messages__pb2.ReportQuery.SerializeToString,
            messages__pb2.SeasonSelector.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBrandsSelector(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Reports/GetBrandsSelector',
            messages__pb2.ReportQuery.SerializeToString,
            messages__pb2.ShoeTrialResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GenerateHtml(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Reports/GenerateHtml',
            messages__pb2.ReportQuery.SerializeToString,
            messages__pb2.DashboardReport.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Reports/GetData',
            messages__pb2.DataRequest.SerializeToString,
            messages__pb2.DataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CompaniesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getCompanies = channel.unary_stream(
                '/AvaProtos.Companies/getCompanies',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.Company.FromString,
                )
        self.GetCompanyByName = channel.unary_unary(
                '/AvaProtos.Companies/GetCompanyByName',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.Company.FromString,
                )
        self.getBranch = channel.unary_unary(
                '/AvaProtos.Companies/getBranch',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.Branch.FromString,
                )
        self.addCompany = channel.unary_unary(
                '/AvaProtos.Companies/addCompany',
                request_serializer=messages__pb2.Company.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.editCompany = channel.unary_unary(
                '/AvaProtos.Companies/editCompany',
                request_serializer=messages__pb2.Company.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.countCompanies = channel.unary_unary(
                '/AvaProtos.Companies/countCompanies',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.addBranch = channel.unary_unary(
                '/AvaProtos.Companies/addBranch',
                request_serializer=messages__pb2.Branch.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.editBranch = channel.unary_unary(
                '/AvaProtos.Companies/editBranch',
                request_serializer=messages__pb2.Branch.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.addLicense = channel.unary_unary(
                '/AvaProtos.Companies/addLicense',
                request_serializer=messages__pb2.Company.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.getLicenseHistory = channel.unary_stream(
                '/AvaProtos.Companies/getLicenseHistory',
                request_serializer=messages__pb2.LicenseHistoryQuery.SerializeToString,
                response_deserializer=messages__pb2.LicenseHistory.FromString,
                )
        self.uploadFile = channel.unary_unary(
                '/AvaProtos.Companies/uploadFile',
                request_serializer=messages__pb2.ImageLogoQuery.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.deleteCompany = channel.unary_unary(
                '/AvaProtos.Companies/deleteCompany',
                request_serializer=messages__pb2.Company.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )


class CompaniesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getCompanies(self, request, context):
        """List companies matching logged in user role
        Possible sort and filter attributes: "name"
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCompanyByName(self, request, context):
        """Get company by name
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBranch(self, request, context):
        """Get the matching Branch for the CMSQuery.str_query branch_id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addCompany(self, request, context):
        """Add company
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def editCompany(self, request, context):
        """Edit company
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countCompanies(self, request, context):
        """Count companies matching query
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addBranch(self, request, context):
        """Add Branch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def editBranch(self, request, context):
        """Edit Branch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def addLicense(self, request, context):
        """Add license
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getLicenseHistory(self, request, context):
        """Get License History
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def uploadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteCompany(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CompaniesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getCompanies': grpc.unary_stream_rpc_method_handler(
                    servicer.getCompanies,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.Company.SerializeToString,
            ),
            'GetCompanyByName': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCompanyByName,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.Company.SerializeToString,
            ),
            'getBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.getBranch,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.Branch.SerializeToString,
            ),
            'addCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.addCompany,
                    request_deserializer=messages__pb2.Company.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'editCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.editCompany,
                    request_deserializer=messages__pb2.Company.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'countCompanies': grpc.unary_unary_rpc_method_handler(
                    servicer.countCompanies,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'addBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.addBranch,
                    request_deserializer=messages__pb2.Branch.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'editBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.editBranch,
                    request_deserializer=messages__pb2.Branch.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'addLicense': grpc.unary_unary_rpc_method_handler(
                    servicer.addLicense,
                    request_deserializer=messages__pb2.Company.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'getLicenseHistory': grpc.unary_stream_rpc_method_handler(
                    servicer.getLicenseHistory,
                    request_deserializer=messages__pb2.LicenseHistoryQuery.FromString,
                    response_serializer=messages__pb2.LicenseHistory.SerializeToString,
            ),
            'uploadFile': grpc.unary_unary_rpc_method_handler(
                    servicer.uploadFile,
                    request_deserializer=messages__pb2.ImageLogoQuery.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'deleteCompany': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteCompany,
                    request_deserializer=messages__pb2.Company.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AvaProtos.Companies', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Companies(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getCompanies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Companies/getCompanies',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.Company.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCompanyByName(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Companies/GetCompanyByName',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.Company.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Companies/getBranch',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.Branch.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Companies/addCompany',
            messages__pb2.Company.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def editCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Companies/editCompany',
            messages__pb2.Company.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def countCompanies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Companies/countCompanies',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Companies/addBranch',
            messages__pb2.Branch.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def editBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Companies/editBranch',
            messages__pb2.Branch.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def addLicense(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Companies/addLicense',
            messages__pb2.Company.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getLicenseHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Companies/getLicenseHistory',
            messages__pb2.LicenseHistoryQuery.SerializeToString,
            messages__pb2.LicenseHistory.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def uploadFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Companies/uploadFile',
            messages__pb2.ImageLogoQuery.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteCompany(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Companies/deleteCompany',
            messages__pb2.Company.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ShoesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getShoes = channel.unary_stream(
                '/AvaProtos.Shoes/getShoes',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.Shoe.FromString,
                )
        self.getShoe = channel.unary_unary(
                '/AvaProtos.Shoes/getShoe',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.Shoe.FromString,
                )
        self.getShoesForBranchId = channel.unary_stream(
                '/AvaProtos.Shoes/getShoesForBranchId',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.Shoe.FromString,
                )
        self.doesEanExist = channel.unary_unary(
                '/AvaProtos.Shoes/doesEanExist',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.setShoe = channel.unary_unary(
                '/AvaProtos.Shoes/setShoe',
                request_serializer=messages__pb2.Shoe.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.removeShoe = channel.unary_unary(
                '/AvaProtos.Shoes/removeShoe',
                request_serializer=messages__pb2.Shoe.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.countShoes = channel.unary_unary(
                '/AvaProtos.Shoes/countShoes',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.countShoesForBranchId = channel.unary_unary(
                '/AvaProtos.Shoes/countShoesForBranchId',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.setShoesForBranch = channel.unary_unary(
                '/AvaProtos.Shoes/setShoesForBranch',
                request_serializer=messages__pb2.BranchShoeUpdate.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.getTotalShoesForBranchId = channel.unary_stream(
                '/AvaProtos.Shoes/getTotalShoesForBranchId',
                request_serializer=messages__pb2.SearchBranch.SerializeToString,
                response_deserializer=messages__pb2.Shoe.FromString,
                )
        self.getShoesForModel = channel.unary_stream(
                '/AvaProtos.Shoes/getShoesForModel',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.Shoe.FromString,
                )
        self.getShoeSizeList = channel.unary_stream(
                '/AvaProtos.Shoes/getShoeSizeList',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.Shoe.FromString,
                )


class ShoesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getShoes(self, request, context):
        """List all shoes within the system
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getShoe(self, request, context):
        """Get shoe by EAN specified in string_query
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getShoesForBranchId(self, request, context):
        """List shoes for branch_id specified in string_query
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def doesEanExist(self, request, context):
        """Check if a EAN specified in string_query exists, int_result 1 indicates exists
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setShoe(self, request, context):
        """Add / Edit a Shoe
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeShoe(self, request, context):
        """Remove a Shoe
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countShoes(self, request, context):
        """Count Shoes matching query
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countShoesForBranchId(self, request, context):
        """Count the number of shoes for a given branch_id in string_query
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setShoesForBranch(self, request, context):
        """Set the shoes a given branch has
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getTotalShoesForBranchId(self, request, context):
        """List shoes for selected specified branch_id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getShoesForModel(self, request, context):
        """List shoes for selected specified brand
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getShoeSizeList(self, request, context):
        """List shoe Size
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ShoesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getShoes': grpc.unary_stream_rpc_method_handler(
                    servicer.getShoes,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.Shoe.SerializeToString,
            ),
            'getShoe': grpc.unary_unary_rpc_method_handler(
                    servicer.getShoe,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.Shoe.SerializeToString,
            ),
            'getShoesForBranchId': grpc.unary_stream_rpc_method_handler(
                    servicer.getShoesForBranchId,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.Shoe.SerializeToString,
            ),
            'doesEanExist': grpc.unary_unary_rpc_method_handler(
                    servicer.doesEanExist,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'setShoe': grpc.unary_unary_rpc_method_handler(
                    servicer.setShoe,
                    request_deserializer=messages__pb2.Shoe.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'removeShoe': grpc.unary_unary_rpc_method_handler(
                    servicer.removeShoe,
                    request_deserializer=messages__pb2.Shoe.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'countShoes': grpc.unary_unary_rpc_method_handler(
                    servicer.countShoes,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'countShoesForBranchId': grpc.unary_unary_rpc_method_handler(
                    servicer.countShoesForBranchId,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'setShoesForBranch': grpc.unary_unary_rpc_method_handler(
                    servicer.setShoesForBranch,
                    request_deserializer=messages__pb2.BranchShoeUpdate.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'getTotalShoesForBranchId': grpc.unary_stream_rpc_method_handler(
                    servicer.getTotalShoesForBranchId,
                    request_deserializer=messages__pb2.SearchBranch.FromString,
                    response_serializer=messages__pb2.Shoe.SerializeToString,
            ),
            'getShoesForModel': grpc.unary_stream_rpc_method_handler(
                    servicer.getShoesForModel,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.Shoe.SerializeToString,
            ),
            'getShoeSizeList': grpc.unary_stream_rpc_method_handler(
                    servicer.getShoeSizeList,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.Shoe.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AvaProtos.Shoes', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Shoes(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getShoes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Shoes/getShoes',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.Shoe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getShoe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Shoes/getShoe',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.Shoe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getShoesForBranchId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Shoes/getShoesForBranchId',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.Shoe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def doesEanExist(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Shoes/doesEanExist',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setShoe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Shoes/setShoe',
            messages__pb2.Shoe.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeShoe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Shoes/removeShoe',
            messages__pb2.Shoe.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def countShoes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Shoes/countShoes',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def countShoesForBranchId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Shoes/countShoesForBranchId',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setShoesForBranch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Shoes/setShoesForBranch',
            messages__pb2.BranchShoeUpdate.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getTotalShoesForBranchId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Shoes/getTotalShoesForBranchId',
            messages__pb2.SearchBranch.SerializeToString,
            messages__pb2.Shoe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getShoesForModel(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Shoes/getShoesForModel',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.Shoe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getShoeSizeList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Shoes/getShoeSizeList',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.Shoe.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class UsersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.login = channel.unary_unary(
                '/AvaProtos.Users/login',
                request_serializer=messages__pb2.Login.SerializeToString,
                response_deserializer=messages__pb2.User.FromString,
                )
        self.getUsers = channel.unary_stream(
                '/AvaProtos.Users/getUsers',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.User.FromString,
                )
        self.countUsers = channel.unary_unary(
                '/AvaProtos.Users/countUsers',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.setUser = channel.unary_unary(
                '/AvaProtos.Users/setUser',
                request_serializer=messages__pb2.User.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.getBranchUsers = channel.unary_stream(
                '/AvaProtos.Users/getBranchUsers',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.User.FromString,
                )
        self.sendPasswordReset = channel.unary_unary(
                '/AvaProtos.Users/sendPasswordReset',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.resetPassword = channel.unary_unary(
                '/AvaProtos.Users/resetPassword',
                request_serializer=messages__pb2.PasswordReset.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.removeUser = channel.unary_unary(
                '/AvaProtos.Users/removeUser',
                request_serializer=messages__pb2.User.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )


class UsersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def login(self, request, context):
        """Login and get JWT token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getUsers(self, request, context):
        """Returns a list of users matching the query
        Possible sort and filter attributes: "name", "email"
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countUsers(self, request, context):
        """Get the count of users in the system
        Possible filter attributes: "name", "email"
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setUser(self, request, context):
        """Updates an existing user
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBranchUsers(self, request, context):
        """Returns stream of users matching branch
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sendPasswordReset(self, request, context):
        """Request a password reset link
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resetPassword(self, request, context):
        """Reset password using token
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeUser(self, request, context):
        """Remove users
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=messages__pb2.Login.FromString,
                    response_serializer=messages__pb2.User.SerializeToString,
            ),
            'getUsers': grpc.unary_stream_rpc_method_handler(
                    servicer.getUsers,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.User.SerializeToString,
            ),
            'countUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.countUsers,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'setUser': grpc.unary_unary_rpc_method_handler(
                    servicer.setUser,
                    request_deserializer=messages__pb2.User.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'getBranchUsers': grpc.unary_stream_rpc_method_handler(
                    servicer.getBranchUsers,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.User.SerializeToString,
            ),
            'sendPasswordReset': grpc.unary_unary_rpc_method_handler(
                    servicer.sendPasswordReset,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'resetPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.resetPassword,
                    request_deserializer=messages__pb2.PasswordReset.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'removeUser': grpc.unary_unary_rpc_method_handler(
                    servicer.removeUser,
                    request_deserializer=messages__pb2.User.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AvaProtos.Users', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Users(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Users/login',
            messages__pb2.Login.SerializeToString,
            messages__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Users/getUsers',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def countUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Users/countUsers',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Users/setUser',
            messages__pb2.User.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBranchUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Users/getBranchUsers',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sendPasswordReset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Users/sendPasswordReset',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def resetPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Users/resetPassword',
            messages__pb2.PasswordReset.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Users/removeUser',
            messages__pb2.User.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CustomersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getCustomers = channel.unary_stream(
                '/AvaProtos.Customers/getCustomers',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.Customer.FromString,
                )
        self.countCustomers = channel.unary_unary(
                '/AvaProtos.Customers/countCustomers',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.getBioCustomers = channel.unary_stream(
                '/AvaProtos.Customers/getBioCustomers',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.Customer.FromString,
                )
        self.getBioCustomersExport = channel.unary_stream(
                '/AvaProtos.Customers/getBioCustomersExport',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.Customer.FromString,
                )
        self.countBioCustomers = channel.unary_unary(
                '/AvaProtos.Customers/countBioCustomers',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.setCustomer = channel.unary_unary(
                '/AvaProtos.Customers/setCustomer',
                request_serializer=messages__pb2.Customer.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.removeCustomer = channel.unary_unary(
                '/AvaProtos.Customers/removeCustomer',
                request_serializer=messages__pb2.Customer.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )


class CustomersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getCustomers(self, request, context):
        """Returns a list of customers matching the query
        Possible sort and filter attributes: "first_name", "last_name", "email"
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countCustomers(self, request, context):
        """Get the count of users in the system
        Possible filter attributes: "first_name", "last_name", "email"
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBioCustomers(self, request, context):
        """List for Bio-report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getBioCustomersExport(self, request, context):
        """List for Bio-report
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countBioCustomers(self, request, context):
        """Get the count of Bio-report in the system
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setCustomer(self, request, context):
        """Stores (upserts) the passed customer details, returns assigned customer_id in result
        If specified customer_id is blank, new customer is created, otherwise must specify an
        existing record to be updated
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def removeCustomer(self, request, context):
        """Removes an existing customer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CustomersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getCustomers': grpc.unary_stream_rpc_method_handler(
                    servicer.getCustomers,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.Customer.SerializeToString,
            ),
            'countCustomers': grpc.unary_unary_rpc_method_handler(
                    servicer.countCustomers,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'getBioCustomers': grpc.unary_stream_rpc_method_handler(
                    servicer.getBioCustomers,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.Customer.SerializeToString,
            ),
            'getBioCustomersExport': grpc.unary_stream_rpc_method_handler(
                    servicer.getBioCustomersExport,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.Customer.SerializeToString,
            ),
            'countBioCustomers': grpc.unary_unary_rpc_method_handler(
                    servicer.countBioCustomers,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'setCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.setCustomer,
                    request_deserializer=messages__pb2.Customer.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'removeCustomer': grpc.unary_unary_rpc_method_handler(
                    servicer.removeCustomer,
                    request_deserializer=messages__pb2.Customer.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AvaProtos.Customers', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Customers(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getCustomers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Customers/getCustomers',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.Customer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def countCustomers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Customers/countCustomers',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBioCustomers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Customers/getBioCustomers',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.Customer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getBioCustomersExport(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Customers/getBioCustomersExport',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.Customer.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def countBioCustomers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Customers/countBioCustomers',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Customers/setCustomer',
            messages__pb2.Customer.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def removeCustomer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Customers/removeCustomer',
            messages__pb2.Customer.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class DataStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getShoeTrialResults = channel.unary_stream(
                '/AvaProtos.Data/getShoeTrialResults',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.ShoeTrialResult.FromString,
                )
        self.getMinifiedResultsByCustomerId = channel.unary_stream(
                '/AvaProtos.Data/getMinifiedResultsByCustomerId',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.ShoeTrialResult.FromString,
                )
        self.getShoeTrialResultsByCustomerId = channel.unary_stream(
                '/AvaProtos.Data/getShoeTrialResultsByCustomerId',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.ShoeTrialResult.FromString,
                )
        self.countShoeTrialResultsByCustomerId = channel.unary_unary(
                '/AvaProtos.Data/countShoeTrialResultsByCustomerId',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.countShoeTrialResults = channel.unary_unary(
                '/AvaProtos.Data/countShoeTrialResults',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.setShoeTrialResult = channel.unary_unary(
                '/AvaProtos.Data/setShoeTrialResult',
                request_serializer=messages__pb2.ShoeTrialResult.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.getMetricMapping = channel.unary_stream(
                '/AvaProtos.Data/getMetricMapping',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.MetricMappingMsg.FromString,
                )
        self.setMetricMapping = channel.unary_unary(
                '/AvaProtos.Data/setMetricMapping',
                request_serializer=messages__pb2.MetricMappingMsg.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )
        self.deleteShoeTrialResult = channel.unary_unary(
                '/AvaProtos.Data/deleteShoeTrialResult',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )


class DataServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getShoeTrialResults(self, request, context):
        """Returns a list of ShoeTrial Results matching the query
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMinifiedResultsByCustomerId(self, request, context):
        """Returns a minfied version of the shoe trial results for a given customer ID
        Used for the web UI
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getShoeTrialResultsByCustomerId(self, request, context):
        """Returns a list of ShoeTrial Results matching the customer_id passed to string_query
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countShoeTrialResultsByCustomerId(self, request, context):
        """Get the count of ShoeTrialResults matching the customer_id passed to string_query
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countShoeTrialResults(self, request, context):
        """Get the count of ShoeTrialResults in the system
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setShoeTrialResult(self, request, context):
        """Saves the passed Shoe Trial Result
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getMetricMapping(self, request, context):
        """Returns a list of Metric Mapping schemes
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setMetricMapping(self, request, context):
        """Saves the passed Metric Mapping scheme
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteShoeTrialResult(self, request, context):
        """Deletes any matching ShoeTrialResult (using CMSQuery.str_value = recording_id)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DataServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getShoeTrialResults': grpc.unary_stream_rpc_method_handler(
                    servicer.getShoeTrialResults,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.ShoeTrialResult.SerializeToString,
            ),
            'getMinifiedResultsByCustomerId': grpc.unary_stream_rpc_method_handler(
                    servicer.getMinifiedResultsByCustomerId,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.ShoeTrialResult.SerializeToString,
            ),
            'getShoeTrialResultsByCustomerId': grpc.unary_stream_rpc_method_handler(
                    servicer.getShoeTrialResultsByCustomerId,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.ShoeTrialResult.SerializeToString,
            ),
            'countShoeTrialResultsByCustomerId': grpc.unary_unary_rpc_method_handler(
                    servicer.countShoeTrialResultsByCustomerId,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'countShoeTrialResults': grpc.unary_unary_rpc_method_handler(
                    servicer.countShoeTrialResults,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'setShoeTrialResult': grpc.unary_unary_rpc_method_handler(
                    servicer.setShoeTrialResult,
                    request_deserializer=messages__pb2.ShoeTrialResult.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'getMetricMapping': grpc.unary_stream_rpc_method_handler(
                    servicer.getMetricMapping,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.MetricMappingMsg.SerializeToString,
            ),
            'setMetricMapping': grpc.unary_unary_rpc_method_handler(
                    servicer.setMetricMapping,
                    request_deserializer=messages__pb2.MetricMappingMsg.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
            'deleteShoeTrialResult': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteShoeTrialResult,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AvaProtos.Data', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Data(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getShoeTrialResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Data/getShoeTrialResults',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.ShoeTrialResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMinifiedResultsByCustomerId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Data/getMinifiedResultsByCustomerId',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.ShoeTrialResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getShoeTrialResultsByCustomerId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Data/getShoeTrialResultsByCustomerId',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.ShoeTrialResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def countShoeTrialResultsByCustomerId(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Data/countShoeTrialResultsByCustomerId',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def countShoeTrialResults(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Data/countShoeTrialResults',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setShoeTrialResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Data/setShoeTrialResult',
            messages__pb2.ShoeTrialResult.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getMetricMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.Data/getMetricMapping',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.MetricMappingMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setMetricMapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Data/setMetricMapping',
            messages__pb2.MetricMappingMsg.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deleteShoeTrialResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Data/deleteShoeTrialResult',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ConfigurationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getCurrentConfigurationSettings = channel.unary_unary(
                '/AvaProtos.Configuration/getCurrentConfigurationSettings',
                request_serializer=messages__pb2.CMSQuery.SerializeToString,
                response_deserializer=messages__pb2.ConfigurationSettings.FromString,
                )
        self.setConfigurationSettings = channel.unary_unary(
                '/AvaProtos.Configuration/setConfigurationSettings',
                request_serializer=messages__pb2.ConfigurationSettings.SerializeToString,
                response_deserializer=messages__pb2.CMSResult.FromString,
                )


class ConfigurationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getCurrentConfigurationSettings(self, request, context):
        """Returns the current Configuration Settings
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def setConfigurationSettings(self, request, context):
        """Saves the passed Configuration Settings as current
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ConfigurationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getCurrentConfigurationSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.getCurrentConfigurationSettings,
                    request_deserializer=messages__pb2.CMSQuery.FromString,
                    response_serializer=messages__pb2.ConfigurationSettings.SerializeToString,
            ),
            'setConfigurationSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.setConfigurationSettings,
                    request_deserializer=messages__pb2.ConfigurationSettings.FromString,
                    response_serializer=messages__pb2.CMSResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AvaProtos.Configuration', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Configuration(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getCurrentConfigurationSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Configuration/getCurrentConfigurationSettings',
            messages__pb2.CMSQuery.SerializeToString,
            messages__pb2.ConfigurationSettings.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def setConfigurationSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/AvaProtos.Configuration/setConfigurationSettings',
            messages__pb2.ConfigurationSettings.SerializeToString,
            messages__pb2.CMSResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CaptureEngineGRpcStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPointCloudData = channel.unary_stream(
                '/AvaProtos.CaptureEngineGRpc/GetPointCloudData',
                request_serializer=messages__pb2.PointCloudDataRequest.SerializeToString,
                response_deserializer=messages__pb2.PointCloudData.FromString,
                )


class CaptureEngineGRpcServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPointCloudData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CaptureEngineGRpcServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetPointCloudData': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPointCloudData,
                    request_deserializer=messages__pb2.PointCloudDataRequest.FromString,
                    response_serializer=messages__pb2.PointCloudData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'AvaProtos.CaptureEngineGRpc', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CaptureEngineGRpc(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPointCloudData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/AvaProtos.CaptureEngineGRpc/GetPointCloudData',
            messages__pb2.PointCloudDataRequest.SerializeToString,
            messages__pb2.PointCloudData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
